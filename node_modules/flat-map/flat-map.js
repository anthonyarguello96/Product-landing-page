'use strict';

exports.__esModule = true;

var _isStream = require('is-stream');

var _isStream2 = _interopRequireDefault(_isStream);

var _through = require('through');

var _through2 = _interopRequireDefault(_through);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isPromise(obj) {
  return obj.then;
}

function flatten(data) {
  var _this = this;

  if ((0, _isStream2.default)(data)) {
    return new Promise(function (resolve, reject) {
      var err = void 0;
      data.on('error', function (e) {
        return err = e, reject(e);
      }).pipe((0, _through2.default)(_this.queue, function () {
        if (err) return reject(err);
        resolve(data);
      }));
    });
  }
  if (Array.isArray(data)) {
    data.forEach(this.queue);
  } else {
    this.queue(data);
  }
  return data;
}

function flatMap(callback) {
  var promises = [];
  var index = 0;
  function flush() {
    stream.emit('end');
  }

  var stream = (0, _through2.default)(function (data) {
    var _this2 = this;

    callback(data, function (err, data) {
      if (err) return promises.push(Promise.reject(err));
      if (isPromise(data)) {
        return promises.push(data.then(flatten.bind(_this2)));
      }

      var result = flatten.call(_this2, data);
      if (isPromise(result)) promises.push(result);
    }, index++, flush);
  }, function () {
    var _this3 = this;

    Promise.all(promises).then(function () {
      return _this3.queue(null);
    }).catch(function (err) {
      _this3.emit('error', err);
      _this3.queue(null);
    });
  });

  return stream;
}

exports.default = flatMap;