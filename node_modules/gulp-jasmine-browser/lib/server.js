'use strict';

exports.__esModule = true;
exports.listen = exports.createServer = undefined;

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _mime = require('mime');

var _mime2 = _interopRequireDefault(_mime);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _serveFavicon = require('serve-favicon');

var _serveFavicon2 = _interopRequireDefault(_serveFavicon);

var _stream = require('stream');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function log(message) {
  try {
    var _log = require('fancy-log');
    _log(message);
  } catch (e) {
    console.log(message);
  }
}

function renderFile(res, files, pathname, whenReady) {
  whenReady().then(function () {
    pathname = decodeURIComponent(pathname);
    if (pathname && files[pathname]) {
      res.status(200).type(_mime2.default.lookup(pathname));
      var stream = new _stream.PassThrough();
      stream.end(files[pathname]);
      stream.pipe(res);
      return;
    }
    res.status(404).send('File not Found');
  }, function () {
    renderFile(res, files, pathname, whenReady);
  });
}

function createServer(files) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var app = (0, _express2.default)();

  app.use((0, _serveFavicon2.default)(_path2.default.resolve(__dirname, '..', 'public', 'jasmine_favicon.png')));

  app.get('/', function (req, res) {
    var _options$whenReady = options.whenReady,
        whenReady = _options$whenReady === undefined ? function () {
      return _promise2.default.resolve();
    } : _options$whenReady;

    renderFile(res, files, 'specRunner.html', whenReady);
  });

  app.get('/consoleRunner', function (req, res) {
    var _options$whenReady2 = options.whenReady,
        whenReady = _options$whenReady2 === undefined ? function () {
      return _promise2.default.resolve();
    } : _options$whenReady2;

    renderFile(res, files, 'consoleRunner.html', whenReady);
  });

  app.get('*', function (req, res) {
    var _options$whenReady3 = options.whenReady,
        whenReady = _options$whenReady3 === undefined ? function () {
      return _promise2.default.resolve();
    } : _options$whenReady3;

    var filePath = req.path.replace(/^\//, '');
    var pathname = _path2.default.normalize(filePath);
    renderFile(res, files, pathname, whenReady);
  });

  return app;
}

function listen(port, files) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  return new _promise2.default(function (resolve) {
    var server = createServer(files, options).listen(port, function () {
      log('Jasmine server listening on port ' + port);
      resolve({ server: server, port: port });
    });
  });
}

exports.createServer = createServer;
exports.listen = listen;